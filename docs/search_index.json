[["correlation-and-simple-linear-regression.html", "Module 8 Correlation and simple linear regression 8.1 Creating a scatter plot 8.2 Fitting a simple linear regression model 8.3 Plotting residuals from a simple linear regression", " Module 8 Correlation and simple linear regression We will demonstrate using Stata for correlation and simple linear regression using the dataset Example_8.1.rds. lung &lt;- readRDS(&quot;data/examples/Example_8.1.rds&quot;) 8.1 Creating a scatter plot We can use the plot function to create a scatter plot to explore the association between height and FVC, assigning meaningful labels with the xlab and ylab commands: plot(x=lung$Height, y=lung$FVC, xlab=&quot;Height (cm)&quot;, ylab=&quot;Forced vital capacity (L)&quot;) To add a fitted line, we can use the abline() function which adds a straight line to the plot. The equation of this straight line will be determined from the estimated regression line, which we specify with lm(y ~ x) where y represents the outcome variable, and x represents the explanatory variable. Putting this all together: plot(x=lung$Height, y=lung$FVC, xlab=&quot;Height (cm)&quot;, ylab=&quot;Forced vital capacity (L)&quot;) abline(lm(lung$FVC ~ lung$Height)) Calculating a correlation coefficient We can use the cor.test(x, y) function to calculate a Pearsonâ€™s correlation coefficient: cor.test(lung$Height, lung$FVC) ## ## Pearson&#39;s product-moment correlation ## ## data: lung$Height and lung$FVC ## t = 10.577, df = 118, p-value &lt; 2.2e-16 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.5924715 0.7794090 ## sample estimates: ## cor ## 0.697628 8.2 Fitting a simple linear regression model We can use the lm function to fit a simple linear regression model, specifying the model as y ~ x where y represents the outcome variable, and x represents the explanatory variable. Using Example_8.1.rds, we can quantify the relationship between FVC and height. lm(lung$FVC ~ lung$Height) ## ## Call: ## lm(formula = lung$FVC ~ lung$Height) ## ## Coefficients: ## (Intercept) lung$Height ## -18.8735 0.1408 The default output from the lm function is rather sparse. We can obtain much more useful information by defining the model as an object, then using the summary() function: model1 &lt;- lm(lung$FVC ~ lung$Height) summary(model1) ## ## Call: ## lm(formula = lung$FVC ~ lung$Height) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.01139 -0.23643 -0.02082 0.24918 1.31786 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -18.87347 2.19365 -8.604 3.89e-14 *** ## lung$Height 0.14076 0.01331 10.577 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3965 on 118 degrees of freedom ## Multiple R-squared: 0.4867, Adjusted R-squared: 0.4823 ## F-statistic: 111.9 on 1 and 118 DF, p-value: &lt; 2.2e-16 Finally, we can obtain 95% confidence intervals for the regression coefficients using the confint function: confint(model1) ## 2.5 % 97.5 % ## (Intercept) -23.2174967 -14.5294444 ## lung$Height 0.1144042 0.1671092 8.3 Plotting residuals from a simple linear regression We can use the resid function to obtain the residuals from a saved model. These residuals can then be plotted using a histogram in the usual way: residuals &lt;- resid(model1) hist(residuals) A Normal curve can be overlaid if we plot the residuals using a probability scale. hist(residuals, probability = TRUE) curve(dnorm(x, mean=mean(residuals), sd=sd(residuals)), col=&quot;darkblue&quot;, lwd=2, add=TRUE) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
